# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'


    #Tag all controllers as a services in this route
    App\UI\Http\Rest\Controller\:
        resource: '../src/UI/Http/Rest/Controller/*'
        tags: ['controller.service_arguments']


    #Tag the interfaces of command with its corresponding command / busses to wiring
    #All the classes that implements them will registered as listener for messagebus
    _instanceof:
        App\Application\Shared\Command\CommandHandlerInterface:
            public: true
            tags:
                - { name: messenger.message_handler, bus: command.bus }

        App\Application\Shared\Query\QueryHandlerInterface:
            public: true
            tags:
                - { name: messenger.message_handler, bus: query.bus }

        App\Application\Shared\Event\EventHandlerInterface:
            public: true
            tags:
                - { name: messenger.message_handler, bus: event.bus }


    #we set the specific implementation of interfaces
#    App\Domain\User\Repository\UserRepositoryInterface:
#        class: App\Infrastructure\Persistence\Doctrine\Repository\User\UserRepository
#
#    #Auth middlewares
#    App\Infrastructure\Security\AuthMiddleware\AddUserAuthInfoAndRouteActionToRequestMiddleware:
#        tags:
#            - { name: kernel.event_listener, event: kernel.request, method: onApiRequest }